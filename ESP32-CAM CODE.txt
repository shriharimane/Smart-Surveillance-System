// ───────────────────────────────              
//   Smart Surveillance System
//   ESP32-CAM + PIR + Telegram
//   Developed by SciCraft (Modified)
// ───────────────────────────────

#include "esp_camera.h"
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <esp_timer.h>
#include <Arduino.h>
#include <img_converters.h>
#include "fb_gfx.h"
#include "camera_index.h"
#include "esp_http_server.h"

// ======== Wi-Fi Details ========
const char* WIFI_SSID = "YourWiFiName";
const char* WIFI_PASS = "YourWiFiPassword";

// ======== Telegram Bot Info ========
const char* BOT_TOKEN = "YourBotToken";
const char* CHAT_ID = "YourChatID";

WiFiClientSecure secureClient;

// ======== PIR Sensor Config ========
#define PIR_SENSOR_PIN 3
unsigned long lastDetection = 0;
const unsigned long DETECTION_INTERVAL = 15000; // 15 sec delay between detections

// ======== Camera Config ========
#define CAMERA_MODEL_AI_THINKER
#include "camera_pins.h"

void launchCameraServer();  // Function from camera_web_server.cpp

// ───────────────────────────────
// Function: Send captured photo to Telegram
// ───────────────────────────────
void uploadToTelegram(camera_fb_t *frame) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected!");
    return;
  }

  secureClient.stop();
  secureClient.setInsecure();

  if (!secureClient.connect("api.telegram.org", 443)) {
    Serial.println("❌ Connection to Telegram failed!");
    return;
  }

  String boundary = "ESP32CAM_LIMIT";
  String startData = "--" + boundary + "\r\n";
  startData += "Content-Disposition: form-data; name=\"chat_id\"\r\n\r\n" + String(CHAT_ID) + "\r\n";
  startData += "--" + boundary + "\r\n";
  startData += "Content-Disposition: form-data; name=\"caption\"\r\n\r\n";
  startData += "🚨 Intrusion Alert Detected!\r\n";
  startData += "--" + boundary + "\r\n";
  startData += "Content-Disposition: form-data; name=\"photo\"; filename=\"capture.jpg\"\r\n";
  startData += "Content-Type: image/jpeg\r\n\r\n";

  String endData = "\r\n--" + boundary + "--\r\n";
  int totalLength = startData.length() + frame->len + endData.length();

  String header = "POST /bot" + String(BOT_TOKEN) + "/sendPhoto HTTP/1.1\r\n";
  header += "Host: api.telegram.org\r\n";
  header += "Content-Type: multipart/form-data; boundary=" + boundary + "\r\n";
  header += "Content-Length: " + String(totalLength) + "\r\n\r\n";

  secureClient.print(header);
  secureClient.print(startData);
  secureClient.write(frame->buf, frame->len);
  secureClient.print(endData);

  delay(400);
  Serial.println("📤 Image sent successfully!");
  secureClient.stop();
}

// ───────────────────────────────
// Setup Section
// ───────────────────────────────
void setup() {
  Serial.begin(115200);
  pinMode(PIR_SENSOR_PIN, INPUT);

  WiFi.begin(WIFI_SSID, WIFI_PASS);
  WiFi.setSleep(false);

  Serial.print("🔗 Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\n✅ WiFi Connected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Camera configuration
  camera_config_t camConfig;
  camConfig.ledc_channel = LEDC_CHANNEL_0;
  camConfig.ledc_timer = LEDC_TIMER_0;
  camConfig.pin_d0 = Y2_GPIO_NUM;
  camConfig.pin_d1 = Y3_GPIO_NUM;
  camConfig.pin_d2 = Y4_GPIO_NUM;
  camConfig.pin_d3 = Y5_GPIO_NUM;
  camConfig.pin_d4 = Y6_GPIO_NUM;
  camConfig.pin_d5 = Y7_GPIO_NUM;
  camConfig.pin_d6 = Y8_GPIO_NUM;
  camConfig.pin_d7 = Y9_GPIO_NUM;
  camConfig.pin_xclk = XCLK_GPIO_NUM;
  camConfig.pin_pclk = PCLK_GPIO_NUM;
  camConfig.pin_vsync = VSYNC_GPIO_NUM;
  camConfig.pin_href = HREF_GPIO_NUM;
  camConfig.pin_sccb_sda = SIOD_GPIO_NUM;
  camConfig.pin_sccb_scl = SIOC_GPIO_NUM;
  camConfig.pin_pwdn = PWDN_GPIO_NUM;
  camConfig.pin_reset = RESET_GPIO_NUM;
  camConfig.xclk_freq_hz = 20000000;
  camConfig.pixel_format = PIXFORMAT_JPEG;
  camConfig.frame_size = FRAMESIZE_QVGA;
  camConfig.jpeg_quality = 10;
  camConfig.fb_count = 2;
  camConfig.fb_location = CAMERA_FB_IN_PSRAM;

  // Initialize camera
  if (esp_camera_init(&camConfig) != ESP_OK) {
    Serial.println("❌ Camera initialization failed!");
    return;
  }

  Serial.println("📸 Camera ready!");
  launchCameraServer();
  Serial.print("View Stream at: http://");
  Serial.println(WiFi.localIP());
}

// ───────────────────────────────
// Main Loop
// ───────────────────────────────
void loop() {
  if (digitalRead(PIR_SENSOR_PIN) == HIGH && millis() - lastDetection > DETECTION_INTERVAL) {
    lastDetection = millis();
    Serial.println("⚠️ Motion detected!");

    camera_fb_t *frame = esp_camera_fb_get();
    if (!frame) {
      Serial.println("❌ Failed to capture image!");
      return;
    }

    uploadToTelegram(frame);
    esp_camera_fb_return(frame);
  }
}
